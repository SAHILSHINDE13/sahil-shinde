def quick_sort(arr, low, high):
    if low < high:
        # Partition the array and get the pivot index
        pivot_index = partition(arr, low, high)
        
        # Recursively sort elements before and after partition
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)

def partition(arr, low, high):
    # Choose the rightmost element as pivot
    pivot = arr[high]
    
    # Pointer for greater element
    i = low - 1
    
    # Traverse through all elements
    for j in range(low, high):
        # If current element is smaller than the pivot
        if arr[j] <= pivot:
            # Increment the pointer for greater element
            i += 1
            # Swap elements
            arr[i], arr[j] = arr[j], arr[i]
    
    # Swap the pivot element with the greater element specified by i
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    
    # Return the position from where partition is done
    return i + 1

# Example usage (assuming the array from Figure 2)
if __name__ == "__main__":
    data = [10, 80, 30, 90, 40, 50, 70]  # Example array (replace with actual array from Figure 2 if different)
    print("Original array:", data)
    quick_sort(data, 0, len(data) - 1)
    print("Sorted array:", data)
